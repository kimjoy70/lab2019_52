package com.hy;

import java.util.HashMap;
import java.util.List;
import java.util.StringTokenizer;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.util.HangulConversion;
import com.vo.EmpVO;

@Controller
public class EmpController {
	Logger logger = 
			Logger.getLogger(EmpController.class);
	@Autowired
	public EmpLogic empLogic = null;
	@RequestMapping(value="/emp/getEmpList.hy", method=RequestMethod.GET)
	public String getEmpList(HttpServletRequest req)
	{
		logger.info("getEmpList 호출 성공");
		//command:i_sel|i_upd|i_del|i_ins
		String command = req.getParameter("command");
		List<EmpVO> empList = null;
		EmpVO peVO = new EmpVO();
		
		//조회 버튼을 눌렀을 때
		if("i_sel".equals(command)){
			empList = 
					empLogic.getEmpList(peVO);
		}
		//조회 버튼을 누르지 않았을 때
		else{
			empList = null;
		}
		req.setAttribute("empList", empList);
		return "emp/getEmpList";
//		return "";
	}
	@RequestMapping(value="/emp/getEmpDetail.hy", method=RequestMethod.GET)
	public String getEmpDetail(HttpServletRequest req)
	{
		logger.info("getEmpDetail 호출 성공");
		//command:i_sel|i_upd|i_del|i_ins
		String p_empno = req.getParameter("empno");
		int i_empno = 0;
		if(req.getParameter("empno")!=null){
			i_empno = Integer.parseInt(p_empno);
		}
		List<EmpVO> empList = null;
		EmpVO peVO = new EmpVO();
		peVO.setEmpno(i_empno);
		empList = 
				empLogic.getEmpList(peVO);
		req.setAttribute("empList", empList);
		return "emp/empUpdateForm";  
	}     
	@RequestMapping(value="/emp/empInsert.hy")
	public String empInsert(@ModelAttribute("ma_evo") EmpVO peVO,HttpServletRequest req)
	{  
//		int result = empLogic.empInsert(peVO);
		int result = empLogic.eudEmp(peVO);
		return "emp/getEmpList";
	}
	@RequestMapping(value="/emp/empDelete.hy")
	public String empDelete(HttpServletRequest req)
	{ 
		logger.info("noAll:"+req.getParameter("noAll"));
		String p_noAll = req.getParameter("noAll");
		String[] emps = null;
		if(p_noAll!=null){
			StringTokenizer st = 
					new StringTokenizer(p_noAll,",");
			int size = st.countTokens();
			emps = new String[size];
			for(int j=0;j<size;j++){
				emps[j] = st.nextToken();
			}
		}
		logger.info("emps.length:"+emps.length);
		int result = empLogic.empDelete(emps);
		return "emp/getEmpList";
	}
	@RequestMapping(value="/emp/empUpdate.hy")
	public String empUpdate(@ModelAttribute("ma_evo") EmpVO peVO, HttpServletRequest req)
	{
		logger.info("empUpdate 호출 성공");
		int result = 0;
		result = empLogic.empUpdate(peVO);
		return "redirect:empUpdateOk.jsp";
	}
	@RequestMapping(value="/emp/proc_emp_sal_update.hy")
	public String proc_emp_sal_update(ModelMap mMap
			,@ModelAttribute("ma_evo") EmpVO peVO)
	{
		logger.info("proc_emp_sal_update 호출 성공");
		peVO.setEmpno(7499);
		HashMap<String,Object> pMapEmp = null;
		pMapEmp = empLogic.proc_emp_sal_update(peVO);
		mMap.addAttribute("pMapEmp", pMapEmp);
		return "forward:procedureTest.jsp";
	}
	@RequestMapping(value="/emp/proc_emp_sal_update2.hy")
	public String proc_emp_sal_update2(ModelMap mMap,@ModelAttribute("ma_evo") EmpVO peVO, HttpServletRequest req)
	{
		logger.info("proc_emp_sal_update2 호출 성공");
		peVO.setEmpno(7566);
		String msg = empLogic.proc_emp_sal_update2(peVO);
		mMap.addAttribute("msg", msg);
		return "forward:procedureTest.jsp";
	}
	@RequestMapping(value="/emp/getEmp2.hy")
	public String getEmp2(ModelMap mMap,@ModelAttribute("ma_evo") EmpVO peVO, HttpServletRequest req)
	{
		logger.info("getEmp2 호출 성공");
		peVO.setEmpno(7566);
		HashMap<String,Object> pMapEmp = null;
		pMapEmp = empLogic.getEmp2(peVO);
		mMap.addAttribute("pMapEmp", pMapEmp);
		return "forward:getEmp2Test.jsp";
	}
}





















