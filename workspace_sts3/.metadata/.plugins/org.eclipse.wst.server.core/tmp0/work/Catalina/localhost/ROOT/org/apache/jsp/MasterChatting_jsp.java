/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.19
 * Generated at: 2019-08-22 06:05:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class MasterChatting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");

	session.setAttribute("username", "hi");

      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.0/dist/semantic.min.css\">\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\" integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.0/dist/semantic.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"ui text container\">\r\n");
      out.write("\t\t<div class=\"ui segments\">\r\n");
      out.write("\t\t\t<div class=\"ui segment\">\r\n");
      out.write("\t\t\t\t<p>채팅서버</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"ui action input\">\r\n");
      out.write("\t\t\t<select id=\"users\">\r\n");
      out.write("\t\t\t\t<option value=\"\">ip</option>\r\n");
      out.write("\t\t\t</select> <input id=\"msg\" type=\"text\" placeholder=\"메시지를 입력해주세요\">\r\n");
      out.write("\t\t\t<button class=\"ui button\">입력</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar socket = new WebSocket('ws://127.0.0.1:7000/WebSocketServer')\r\n");
      out.write("\t\tvar data = []\r\n");
      out.write("\t\tsocket.onopen = function() {\r\n");
      out.write("\t\t\tfor(d of data){\r\n");
      out.write("\t\t\t\tif($(\"#users\").val() != d){\r\n");
      out.write("\t\t\t\t$('#users').append('<option class=\"data\" value=\"'+d+'\">'+d+'</option>')\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tsocket.onmessage = function(message) {\r\n");
      out.write("\t\t\talert(\"message ==> \"+message);//object MessageEvent\r\n");
      out.write("\t\t\tvar info = JSON.parse(message.data);//object Object\r\n");
      out.write("\t\t\talert(\"info ==> \"+info);\r\n");
      out.write("\t\t\tconsole.log(info.id)\r\n");
      out.write("\t\t\tif(data.length > 0){\r\n");
      out.write("\t\t\t\tfor(d of data){\r\n");
      out.write("\t\t\t\t\t//console.log(d)\r\n");
      out.write("\t\t\t\t\tif(d != info.id){\r\n");
      out.write("\t\t\t\t\t\tdata.push(info.id)\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tdata.push(info.id)\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar msg = info.message\r\n");
      out.write("\t\t\t$('.ui.segments').append('<div class=\"ui segment\"><p>'+info.id+\":\"+msg+'</p></div>')\r\n");
      out.write("\t\t\t$('#users').html('')\r\n");
      out.write("\t\t\tfor(d of data){\r\n");
      out.write("\t\t\t\tif($(\"#users\").val() != d){\r\n");
      out.write("\t\t\t\t$('#users').append('<option class=\"data\" value=\"'+d+'\">'+d+'</option>')\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tsocket.onerror = function() {\r\n");
      out.write("\t\t\talert('에러가 발생 했습니다.')\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tsocket.onclose = function() {\r\n");
      out.write("\t\t\talert('연결종료')\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$('button').on({\r\n");
      out.write("\t\t\tclick : function(e) {\r\n");
      out.write("\t\t\t\tconsole.log($('#users').val())\r\n");
      out.write("\t\t\t\tvar obj = {\r\n");
      out.write("\t\t\t\t\tid : $('#users').val(),\r\n");
      out.write("\t\t\t\t\tmessage : $('#msg').val(),\r\n");
      out.write("\t\t\t\t\tmaster:'Master'\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\tvar json = JSON.stringify(obj)\r\n");
      out.write("\t\t\t\tsocket.send(json);\r\n");
      out.write("\t\t\t\t$('#msg').val('')\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t$('input').on({\r\n");
      out.write("\t\t\tkeypress : function(e) {\r\n");
      out.write("\t\t\t\tif (e.keyCode === 13) {\r\n");
      out.write("\t\t\t\t\tvar obj = {\r\n");
      out.write("\t\t\t\t\t\tid : $('#users').val(),\r\n");
      out.write("\t\t\t\t\t\tmessage : $('#msg').val(),\r\n");
      out.write("\t\t\t\t\t\tmaster:'Master'\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\tvar json = JSON.stringify(obj)\r\n");
      out.write("\t\t\t\t\tsocket.send(json);\r\n");
      out.write("\t\t\t\t\t$('#msg').val('')\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
