/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.19
 * Generated at: 2019-08-06 23:19:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.react2019.lifecycle;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class getSnapshotBeforeUpdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("props및 state 이전 에도 업데이트 후, 당신은 값이 무엇인지 확인할 수 있다는 것을 의미, 업데이트를 하기 전에 업데이트.\r\n");
      out.write("는 IF getSnapshotBeforeUpdate()방법이 존재, 당신은 또한 포함되어야한다 componentDidUpdate()그렇지 않으면 오류가 발생합니다, 방법.\r\n");
      out.write("아래의 예는 복잡하게 보일 수도 있지만이하는 모든이입니다 :\r\n");
      out.write("구성 요소가 될 때 장착 그것은 \"빨간색\"좋아하는 색으로 렌더링됩니다.\r\n");
      out.write("컴퍼넌트 때 탑재되어, 타이머는 상태를 변경 일초 후에 원하는 색상은 \"옐로우\"된다.\r\n");
      out.write("이 작업은 트리거 업데이트 상을,이 구성 요소는 가지고 있기 때문에 getSnapshotBeforeUpdate()방법,이 방법은 실행되고, 빈 DIV1 요소에 메시지를 기록합니다.\r\n");
      out.write("그 다음 componentDidUpdate()방법은 실행하고 빈 DIV2 요소에 메시지를 기록합니다 :\r\n");
      out.write(" -->\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>getSnapshotBeforeUpdate메소드 - 업데이트 전에도 후에도 값을 확인가능</title>\r\n");
      out.write("\t<script src=\"https://unpkg.com/react@16/umd/react.production.min.js\"></script>\r\n");
      out.write("  \t<script src=\"https://unpkg.com/react-dom@16/umd/react-dom.production.min.js\"></script>\r\n");
      out.write("  \t<script src=\"https://unpkg.com/babel-standalone@6.15.0/babel.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"root\"></div>\r\n");
      out.write("\t<script type=\"text/babel\"> \r\n");
      out.write("class Header extends React.Component {\r\n");
      out.write("  constructor(props) {\r\n");
      out.write("    super(props);\r\n");
      out.write("    this.state = {favoritecolor: \"red\"};\r\n");
      out.write("  }\r\n");
      out.write("  componentDidMount() {\r\n");
      out.write("    setTimeout(() => {\r\n");
      out.write("      this.setState({favoritecolor: \"yellow\"})\r\n");
      out.write("    }, 1000)\r\n");
      out.write("  }\r\n");
      out.write("  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n");
      out.write("    document.getElementById(\"div1\").innerHTML =\r\n");
      out.write("    \"Before the update, the favorite was \" + prevState.favoritecolor;\r\n");
      out.write("  }\r\n");
      out.write("  componentDidUpdate() {\r\n");
      out.write("    document.getElementById(\"div2\").innerHTML =\r\n");
      out.write("    \"The updated favorite is \" + this.state.favoritecolor;\r\n");
      out.write("  }\r\n");
      out.write("  render() {\r\n");
      out.write("    return (\r\n");
      out.write("      <div>\r\n");
      out.write("      <h1>My Favorite Color is {this.state.favoritecolor}</h1>\r\n");
      out.write("      <div id=\"div1\"></div>\r\n");
      out.write("      <div id=\"div2\"></div>\r\n");
      out.write("      </div>\r\n");
      out.write("    );\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("ReactDOM.render(<Header />, document.getElementById('root'));\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
