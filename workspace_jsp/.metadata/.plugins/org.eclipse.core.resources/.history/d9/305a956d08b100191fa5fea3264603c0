package com.mvc1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.log4j.Logger;

import com.util.MyBatisCommonFactory;
import com.vo.MemberVO;
import com.vo.TakeExaminationVO;

public class MemberDao {
	Logger logger = Logger.getLogger(MemberDao.class);
	SqlSessionFactory sqlSessionFactory = null;
	public MemberDao() {
		//insert here - 객체주입
		sqlSessionFactory=
				MyBatisCommonFactory.getSqlSessionFactory();
	}
	public String currentTime() {
		//DML 호출 뿐 아니라 커밋과 롤백 도 처리 할 수 잇음.
		/*
		 * select할 때
		 * sqlSession.selectList("아이디",파라미터)==>List로 반환
		 * sqlSession.selectOne()==> 여기서 One은  Object임
		 * sqlSession.selectMap()==> Map으로 반환
		 * insert 할 때 -> 리턴 타입은 Object임.
		 * sqlSession.insert("아이디",파라미터);
		 * update 할 때 -> 리턴 타입은 int임
		 * sqlSession.update("아이디", 파라미터);
		 * delete할 때-> 리턴 타입은 int임.
		 * sqlSession.delete("아이디:, 파라미터);
		 * 
		 * 과제
		 * MemberDao를 단위 테스트 할 수 있는 클래스를 선언하고
		 * currentTime메소드를 호출 하여 현재 시간 정보(오라클 서버가 제공)를
		 * 출력하는 문장을 작성해 보시오. 
		 * 
		 */
		String time = null;
		try {
			SqlSession sqlSession = sqlSessionFactory.openSession();
			time = sqlSession.selectOne("currentTime");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return time;
	}
	/*
	 * 입력, 수정, 삭제시 주의 사항
	 * 자바에서 JDBC API를 활용할 때는 con.setAutocommit(true)가 디폴트임
	 * 따라서 별도로 끄지 않으면 커밋이 되었으나
	 * myBatis에서는 false가 디폴트 이므로 반드시 커밋 처리 할것.
	 * 관찰하기
	 * 요청 파라미터의 이름과 메소드 이름 그리고 myBatis의 아이디는 무조건 통일하여
	 * 사용할 것.
	 */
	public int memberInsert(Map<String, Object> pMap) {
		logger.info("memberInsert 호출 성공");
		logger.info("pMap.get(mem_id)==>"+pMap.get("mem_id"));
		logger.info("pMap.get(mem_name)==>"+pMap.get("mem_name"));
		logger.info("pMap.get(mem_addr)==>"+pMap.get("mem_addr"));
		logger.info("pMap.get(mem_zipcode)==>"+pMap.get("mem_zipcode"));
		logger.info("pMap.get(mem_pw)==>"+pMap.get("mem_pw"));
		int result = 0;
		try {
			SqlSession sqlSession = 
					sqlSessionFactory.openSession();
			result = sqlSession.update("memberInsert",pMap);
			sqlSession.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	public List<Map<String, Object>> memberList() {
	/*
	 * 웹페이지는 Exception이 발생하면 화면을 확인할 수 가 없다.
	 * 따라서 에러 상황을 파악하는데 화면이 필요할 때는 초기화를 반드시 해줌.	
	 */
		//List<Map<String, Object>> memList = null;
		List<Map<String, Object>> memList = new ArrayList<>();
		try {
			SqlSession sqlSession = 
					sqlSessionFactory.openSession();
			memList = sqlSession.selectList("memberList");
			sqlSession.commit();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return memList;
	}
	public MemberVO login(MemberVO mVO) {
		logger.info("login호출 성공 : "+sqlSessionFactory);
		logger.info("아이디:"+mVO.getMem_id());
		logger.info("비밀번호:"+mVO.getMem_pw());
		MemberVO rmVO = null;
		try {
			SqlSession sqlSession = 
					sqlSessionFactory.openSession();
			rmVO = sqlSession.selectOne("login",mVO);
			logger.info("이름:"+rmVO.getMem_name());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rmVO;
	}
	public MemberVO proc_login(MemberVO mVO) {
		logger.info("proc_login 호출 성공 : "+sqlSessionFactory);
		try {
			SqlSession sqlSession = 
					sqlSessionFactory.openSession();
			Map<String,Object> pMap = new HashMap<>();
			pMap.put("mem_id", mVO.getMem_id());
			pMap.put("mem_pw", mVO.getMem_pw());
			sqlSession.selectOne("proc_login",pMap);
			//logger.info("이름:"+mVO.getMem_name());
			logger.info("이름:"+pMap);
			Object keys[] = pMap.keySet().toArray();
			for(int i=0;i<keys.length;i++) {
				//logger.info(pMap.get(keys[i]));
				if("mem_name".equals((String)keys[i])) {
					mVO.setMem_name(pMap.get("mem_name").toString());
				}
				else if("mem_id".equals((String)keys[i])) {
					mVO.setMem_id(pMap.get("r_status").toString());
				}
			}
			//pMap 에 담긴 값의 타입을 알아보는 코드입니다. getClass()의 역할
			logger.info("key:"+pMap.get("key").getClass());//ArrayList타입
			List list = (List)pMap.get("key");
			Iterator iter = list.iterator();
			while(iter.hasNext()) {
				TakeExaminationVO teVO = (TakeExaminationVO)iter.next();
				logger.info("rMap:"+teVO.getExam_date()+" , "+teVO.getSub_cd()+" , "+teVO.getExam_no());
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mVO;
	}
	/*
	public MemberVO proc_login(MemberVO mVO) {
		logger.info("proc_login 호출 성공 : "+sqlSessionFactory);
		try {
			SqlSession sqlSession = 
					sqlSessionFactory.openSession();
			sqlSession.selectOne("proc_login",mVO);
			//logger.info("이름:"+mVO.getMem_name());
			logger.info("이름:"+mVO);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mVO;
	}
	*/
	public Map<String,Object> idId(MemberVO mVO) {
		logger.info("idId호출 성공 : "+sqlSessionFactory);
		logger.info("아이디:"+mVO.getMem_id());
		logger.info("비밀번호:"+mVO.getMem_pw());
		Map<String,Object> rMap = null;
		try {
			SqlSession sqlSession = 
					sqlSessionFactory.openSession();
			rMap = sqlSession.selectOne("isId",mVO);
			logger.info("상태:"+rMap.get("STATUS"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rMap;
	}
	
	public void my_proc() { 
		logger.info("my_proc 호출 성공"); 
		Map<String,Object> pMap = new HashMap<>();
		try {
			SqlSession sqlSession = 
					sqlSessionFactory.openSession();
			sqlSession.selectOne("my_proc1",pMap);
			logger.info("pMap:"+pMap);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}		
}






