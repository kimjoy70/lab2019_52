/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.19
 * Generated at: 2019-07-06 11:39:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.google;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class sampleMapTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>                                                    \r\n");
      out.write("    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyA-FKKja8sdfgMggjEvEa5agaP6D9wBd6s\"></script>  \r\n");
      out.write("  \t<script type=\"text/javascript\">\r\n");
      out.write("  \t\tfunction getMyLocation(){\r\n");
      out.write("  \t\t\tif(navigator.geolocation){\r\n");
      out.write("  \t\t\t\tnavigator.geolocation.getCurrentPosition(initMap);\r\n");
      out.write("  \t\t\t}\r\n");
      out.write("  \t\t\telse{\r\n");
      out.write("  \t\t\t\talert(\"이런 지오로케이션이 제공되지 않네요.\");\r\n");
      out.write("  \t\t\t}\r\n");
      out.write("  \t\t}\r\n");
      out.write("  \t</script>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body onLoad=\"getMyLocation()\">\r\n");
      out.write("    <div id=\"map\" style=\"width:800px;height:650px;\"></div>\r\n");
      out.write("    <script>\r\n");
      out.write("      function initMap() {\r\n");
      out.write("    \t//월드메르디앙벤처2차 37.478687, 126.878687\r\n");
      out.write("        var myLatLng = {lat: 37.478687, lng: 126.878687};\r\n");
      out.write("\r\n");
      out.write("        // Create a map object and specify the DOM element\r\n");
      out.write("        // for display.\r\n");
      out.write("        var map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("          center: myLatLng,\r\n");
      out.write("          zoom: 16\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Create a marker and set its position.\r\n");
      out.write("        var marker = new google.maps.Marker({\r\n");
      out.write("          map: map,\r\n");
      out.write("          position: myLatLng,\r\n");
      out.write("          title: '한국소프트인재개발원'\r\n");
      out.write("        });\r\n");
      out.write("        var markerMaxWidth = 300;\r\n");
      out.write("        //말풍선 내용\r\n");
      out.write("        var contentString = \"<div><h2>교육센터 위치</h2><p>내용</p><a href=http://www.naver.com>네이버</a></div>\"\r\n");
      out.write("        var infoWindow = new google.maps.InfoWindow({\r\n");
      out.write("        \tcontent:contentString\r\n");
      out.write("           ,maxWidth:markerMaxWidth\r\n");
      out.write("        });\r\n");
      out.write("        google.maps.event.addListener(marker,'click',function(){\r\n");
      out.write("        \tinfoWindow.open(map, marker);\r\n");
      out.write("        });\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
